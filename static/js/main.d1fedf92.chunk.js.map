{"version":3,"sources":["Logo.js","App.js","copyToClipboard.js","styles.js","serviceWorker.js","index.js"],"names":["height","width","className","xmlns","viewBox","id","d","clipPath","fillRule","apiSpec","require","config","Header","Layout","Content","Footer","firebase","initializeApp","apiKey","process","uiConfig","signInFlow","callbacks","signInSuccessWithAuthResult","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","GithubAuthProvider","Description","token","type","icon","onClick","str","el","document","createElement","storeContentEditable","contentEditable","storeReadOnly","readOnly","value","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","setSelectionRange","execCommand","removeChild","removeAllRanges","addRange","copyToClipboard","message","info","Explanation","description","marginTop","DevHome","useState","user","setUser","setToken","onAuthStateChanged","getIdToken","then","catch","err","console","log","isSignedIn","minHeight","paddingTop","Logo","theme","mode","lineHeight","menuHeight","Item","key","signOut","float","padding","spec","supportedSubmitMethods","docExpansion","firebaseAuth","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.d1fedf92.chunk.js","sourcesContent":["import React from 'react'\nexport default ({\n    height = '1em',\n    width = '1em',\n    className = 'logo-primary'\n}) => (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={width}\n            height={height}\n            viewBox=\"0 0 500 500\"\n        >\n            <defs>\n                <clipPath id=\"a\">\n                    <path d=\"M0 0h500v500H0z\" />\n                </clipPath>\n            </defs>\n            <g clipPath=\"url(#a)\" className={className}>\n                <path d=\"M132.197 163.794l58.967-15.29 78.648 303.313-58.966 15.29z\" />\n                <path\n                    d=\"M132.232 151.306c0-59.33 48.169-107.5 107.5-107.5s107.5 48.17 107.5 107.5c0 59.331-48.169 107.5-107.5 107.5s-107.5-48.169-107.5-107.5zm61.906-3.797c0-24.56 19.94-44.5 44.5-44.5s44.5 19.94 44.5 44.5-19.94 44.5-44.5 44.5-44.5-19.94-44.5-44.5z\"\n                    fillRule=\"evenodd\"\n                />\n                <path d=\"M147.44 317h184.707v40.447H147.44z\" />\n            </g>\n        </svg>\n    )","import React, { useState } from 'react';\nimport { Layout, Menu, Button, message, Alert } from 'antd';\nimport './App.css';\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport StyledFirebaseAuth from 'react-firebaseui/StyledFirebaseAuth';\nimport SwaggerUI from 'swagger-ui-react'\nimport 'swagger-ui-react/swagger-ui.css'\nimport Logo from './Logo'\nimport { menuHeight, logoHeight, paddingTop } from './styles'\nimport { copyToClipboard } from './copyToClipboard'\nconst apiSpec = require('./swagger_spec.json')\nconst config = require('./config.json')\nconst { Header, Content, Footer } = Layout\n// Initialize Firebase\nfirebase.initializeApp({ ...config, apiKey: process.env.REACT_APP_FirebaseAPIKey });\n\n// Configure FirebaseUI.\nconst uiConfig = {\n  // Popup signin flow rather than redirect flow.\n  signInFlow: 'popup',\n  callbacks: {\n    // Avoid redirects after sign-in.\n    signInSuccessWithAuthResult: () => false\n  },\n  signInOptions: [\n    firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n    firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n    firebase.auth.GithubAuthProvider.PROVIDER_ID\n  ]\n};\nconst info = () => {\n  message.info('Token copied');\n}\n\nconst Description = ({ token }) => <div>\n  <p>\n    The API uses tokens provided through OAUTH2 Providers. To authenticate the API, copy the token and\n    paste it into the \"JWT  (apiKey)\" box.\n</p>\n  <Button type=\"primary\" icon=\"copy\" onClick={() => {\n    copyToClipboard(token)\n    info()\n  }}>Copy Token</Button>\n</div>\n\nconst Explanation = ({ token }) => <Alert\n  message=\"Authentication\"\n  description={<Description token={token} />}\n  type=\"info\"\n  style={{ marginTop: 15 }}\n/>\n\n\nconst DevHome = () => {\n  const [user, setUser] = useState(null)\n  const [token, setToken] = useState(\"\")\n  firebase.auth().onAuthStateChanged(user => {\n    if (user) {\n      user.getIdToken(true).then(setToken).catch(err => console.log(err))\n    }\n    else {\n      setToken(\"\")\n    }\n    setUser(user)\n\n  })\n  const isSignedIn = !!user\n  return <Layout className=\"layout\" style={{ minHeight: \"100vh\" }}>\n    <Header>\n      <div className=\"logo\" style={{ paddingTop }}>\n        <Logo\n          className=\"logo-primary\"\n          height={logoHeight}\n          width={logoHeight}\n        />\n      </div>\n      <Menu\n        theme=\"dark\"\n        mode=\"horizontal\"\n        style={{ lineHeight: menuHeight + 'px' }}\n      >\n        {isSignedIn && <Menu.Item key=\"1\" onClick={() => firebase.auth().signOut()} style={{ float: 'right' }}>Log Out</Menu.Item>}\n      </Menu>\n    </Header>\n    <Content style={{ padding: '0 50px' }}>\n      {isSignedIn ? <><Explanation token={token} style={{ marginTop: 15 }} /><SwaggerUI\n        spec={apiSpec}\n        supportedSubmitMethods={[\"get\", \"put\", \"post\", \"delete\"]}\n        docExpansion='list'\n      /></> : <StyledFirebaseAuth uiConfig={uiConfig} firebaseAuth={firebase.auth()} />}\n    </Content>\n    <Footer style={{ textAlign: 'center' }}>Finside</Footer>\n  </Layout>\n\n}\n\n\nexport default DevHome;\n","//https://gist.github.com/interactiveRob/39a3eb36c7403f1ba43c190fc88f972f\nexport const copyToClipboard = str => {\n    /* ——— Derived from: https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\n             improved to add iOS device compatibility——— */\n    const el = document.createElement('textarea') // Create a <textarea> element\n\n    let storeContentEditable = el.contentEditable\n    let storeReadOnly = el.readOnly\n\n    el.value = str // Set its value to the string that you want copied\n    el.contentEditable = true\n    el.readOnly = false\n    el.setAttribute('readonly', false) // Make it readonly false for iOS compatability\n    el.setAttribute('contenteditable', true) // Make it editable for iOS\n    el.style.position = 'absolute'\n    el.style.left = '-9999px' // Move outside the screen to make it invisible\n    document.body.appendChild(el) // Append the <textarea> element to the HTML document\n    const selected =\n        document.getSelection().rangeCount > 0 // Check if there is any content selected previously\n            ? document.getSelection().getRangeAt(0) // Store selection if found\n            : false // Mark as false to know no selection existed before\n    el.select() // Select the <textarea> content\n    el.setSelectionRange(0, 999999)\n    document.execCommand('copy') // Copy - only works as a result of a user action (e.g. click events)\n    document.body.removeChild(el) // Remove the <textarea> element\n    if (selected) {\n        // If a selection existed before copying\n        document.getSelection().removeAllRanges() // Unselect everything on the HTML document\n        document.getSelection().addRange(selected) // Restore the original selection\n    }\n\n    el.contentEditable = storeContentEditable\n    el.readOnly = storeReadOnly\n}","export const menuHeight = 64\nexport const logoHeight = 50\nexport const paddingTop = (menuHeight - logoHeight) * 0.5","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}